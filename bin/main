#!/usr/bin/env ruby
require_relative '../lib/logic'
require_relative '../lib/players'
# ------- Methods --------- #
module GameMethods
  def self.gaming(players, board)
    players = players
    puts "#{players[0]} is going to play with X\n"
    puts "#{players[1]} is going to play with O\n\n"
    puts "Great ! #{players[0]} and #{players[1]} let start the battle !!\n\n\n"

    disply_board(board)
  end

  def self.disply_board(board)
    position = 0
    while position < board.length
      if (position % 3).zero?
        puts ''
        print "---+---+---+\n"
      end
      print " #{board[position]} |"
      position += 1
    end
    puts "\n---+---+---+"
    puts "\n"
  end

  def self.create_players(player_char, players, tic_tac_toe)
    i = 0
    while i < 2
      print "Enter pseudo for Player #{i + 1}: "
      input = gets.chomp
      test = Player.new(input, player_char[i])
      players << test.name
      if tic_tac_toe.pseudo_empty?(players[i])
        while tic_tac_toe.pseudo_empty?(players[i])
          puts "Don't leave player names empty"
          print "Enter pseudo for Player #{i + 1}: "
          players[i] = gets.chomp
        end
      end
      i += 1
    end
    players
  end

  def self.check_input(player, iteration, state, board, tic_tac_toe, usedd, player_char)
    j = iteration
    state = state
    print "#{player}, choose a position from (1-9) to place in the board: "
    temp = gets.chomp
    input_user = temp
    current_player = player
    if input_user =~ /[1-9]/ && input_user.to_i.between?(1, 9) && input_user.to_i <= board.length
      test2 = input_user.to_i
      test3 = tic_tac_toe.taken?(test2, usedd) ## => Boolean
      if test3
        while test3
          disply_board(board)
          print "#{current_player}, that spot is not available, please choose another one: "
          review_input = gets.chomp.to_i
          reviewer = tic_tac_toe.analize_input?(review_input)
          if reviewer == false
            test3 = tic_tac_toe.taken?(review_input, usedd)
            if test3 == false
              print "\n#{current_player}, the '#{player_char[j]}' player has chosen spot ##{review_input}\n"
              board[review_input - 1] = player_char[j]
              disply_board(board)
              temp = review_input.to_s
            end
            temp
          elsif reviewer
            disply_board(board)
            print "Invalid input !\n\n"
            check_input(current_player, j, state, board, tic_tac_toe, usedd, player_char)
          end
        end
      else
        print "\n#{current_player}, the '#{player_char[j]}' player has chosen spot ##{test2}\n"
        board[test2 - 1] = player_char[j]
        disply_board(board)
      end
    elsif tic_tac_toe.analize_input?(input_user)
      disply_board(board)
      print "Invalid input !\n\n"
      check_input(current_player, j, state, board, tic_tac_toe, usedd, player_char)
    end
    input_user
  end
end

# ------ End ------------- #

def global
  board = %w[1 2 3 4 5 6 7 8 9]
  player_char = %w[X O]
  game = true
  players = []
  temp = ''
  locations = []
  loc = ''
  usedd = []
  move = 0
  tic_tac_toe = TicTacToe.new
  arb_i = 0
  indexes_win = [[1, 5, 9], [1, 2, 3], [1, 4, 7], [2, 5, 8], [3, 5, 7], [3, 6, 9], [4, 5, 6], [7, 8, 9]]
  player_char = %w[X O]
  county = 1
  state = ''
  system('clear') || system('cls')
  puts "Welcome to our amazing Tic Tac Toe !!\n\n\n"

  players = GameMethods.create_players(player_char, players, tic_tac_toe)
  GameMethods.gaming(players, board)
  i = 0
  while i < 9
    j = 0
    while j < 2
      if state != false
        temp = GameMethods.check_input(players[j], j, state, board, tic_tac_toe, usedd, player_char)
        state = tic_tac_toe.arbiter(temp, player_char[j], players[j], indexes_win)
        county += 1
      end
      if county == 9 && !tic_tac_toe.state.nil?
        p tic_tac_toe.state
        break
      end
      j += 1
    end
    i += 1
    break if county == 9 && state == false
  end
  p tic_tac_toe.state
end

global
puts "\n Game over!"

print " \n Do you want do play again? (Y/N): "
choice = gets.chomp
inside = true if choice.include?('Y')
while inside
  system('clear') || system('cls')
  puts "Welcome to our amazing Tic Tac Toe !!\n\n\n"
  global
  print " \n Do you want do play again? (Y/N): "
  choice = gets.chomp
  break if choice != 'Y'
end

puts 'Good Bye'
